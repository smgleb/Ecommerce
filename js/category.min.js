//HEADER====================================================================================
localStorage.setItem('gridOrList', 'grid');
if (localStorage.getItem('cartlist')) {
	document.querySelector('.popup-bascet__product').innerHTML = localStorage.getItem('cartlist');
}

if (localStorage.getItem('basket')) {
	document.querySelector('.header-body__basked').innerHTML = localStorage.getItem('basket');
}
resProductSumm();


// меняем иконку в выборе категорий в поиске + выпадающее меню категории
document.querySelector('.header-body__category').addEventListener('click', function () {
	let seach_category = document.querySelector('#icon-category');
	if (seach_category.classList.contains('_icon-header_seach_category')) {
		seach_category.className = "_icon-header_seach_category_deg";
	} else {
		seach_category.className = "_icon-header_seach_category";
	}

	//выпадающее меню категории
	let menu_category = document.querySelector('.header-body__list');
	menu_category.classList.toggle('active');
});

// Выбор категории
let category = document.querySelectorAll('.header-body__link');
for (let i = 0; i < category.length; i++) {
	category[i].onclick = getCategory;
}
function getCategory() {
	let catResult = document.querySelector('.header-body__res-category');
	catResult.innerHTML = this.innerHTML;
	catResult.setAttribute('id', `${this.id}`);
}



// запоминаем историю поиска
function HashSeach() {
	_seachHistory = {};

	this.addValue = function (key, value) {
		return _seachHistory[key] = value;
	}
	this.showHistory = function () {
		return _seachHistory;
	}
}

let history = new HashSeach();


// Меню ==================================================
//навигация

let category_menu = document.querySelectorAll('.menu__link-container');
for (let i = 0; i < category_menu.length; i++) {
	category_menu[i].onclick = showSubCategory;
}
function showSubCategory() {
	if (this.parentNode.children[1] !== undefined) {
		let par = this.parentNode;
		par.lastElementChild.classList.toggle('active')
	}

}

//разворот бургера

document.querySelector('.menu__icon').addEventListener('click', function () {
	let burger_icon = document.querySelector('.menu__icon');
	let mobile_menu = document.querySelector('.menu__body');
	let before_background = document.querySelector('.menu__before-background');
	let menu__button_burger = document.querySelector('.menu__button-burger');
	let user_singin = document.querySelector('.menu__user');
	let body = document.querySelector('body');

	burger_icon.classList.toggle('_active');
	mobile_menu.classList.toggle('_active');
	before_background.classList.toggle('_active');
	menu__button_burger.classList.toggle('_active');
	user_singin.classList.toggle('_active');
	body.classList.toggle('_lock');
	// фон назакрытие меню бургер
	before_background.onclick = function () {
		burger_icon.classList.remove('_active');
		mobile_menu.classList.remove('_active');
		before_background.classList.remove('_active');
		menu__button_burger.classList.remove('_active');
		user_singin.classList.remove('_active');
		body.classList.remove('_lock');
	}
});

// нажимание кнопок категория и меню в развороте бургера
let btn_category = document.querySelector('#menu-btn-category');
let btn_menu = document.querySelector('#menu-btn-menu');
let menu_list_category = document.querySelector('.menu__list_category');
let menu_list_menu = document.querySelector('.menu__list_menu');


document.querySelector('#menu-btn-category').addEventListener('click', function () {
	btn_category.classList.add('_active');
	btn_menu.classList.remove('_active');

	menu_list_category.classList.remove('_deactive');
	menu_list_menu.classList.add('_deactive');

})
document.querySelector('#menu-btn-menu').addEventListener('click', function () {
	btn_menu.classList.add('_active');
	btn_category.classList.remove('_active');

	menu_list_category.classList.add('_deactive');
	menu_list_menu.classList.remove('_deactive');

})

// ПОИСК =============================================================================================
// Получение данных категории и инпута
let resultJsonProdSearch = null;
async function getProductsSearch() {
	const file = "json/products.json";
	let response = await fetch(file, { method: "GET" });

	if (response.ok) {
		resultJsonProdSearch = await response.json();
	}
}

document.querySelector('#seach_inp').addEventListener('input', function () {
	let inp = document.querySelector('#seach_inp').value;
	if (inp.length >= 3) {
		const seachBody = document.querySelector('.resultInp');
		const searchCategory = document.querySelector('.header-body__res-category').id;

		seachBody.style.display = 'block';
		let body = document.querySelector('body');
		body.classList.add('_lock');
		renderSearchList(searchCategory);
	} else {

		const seachBody = document.querySelector('.resultInp');
		let body = document.querySelector('body');
		seachBody.style.display = 'none';
		body.classList.remove('_lock');
	}
})


const renderSearchList = async (searchCategory) => {
	let data = await getProductsSearch();
	const searchContainer = document.querySelector('.resultInp__ul');
	data = reduceSearchData(resultJsonProdSearch.products, searchCategory);

	if (data.length > 0) {
		searchContainer.innerHTML = ``;
		searchContainer.innerHTML = `
		 <li class="head-item">
			  <div class="search-title">
					<div class="search-descr">
						 <p class="public" style= "margin-bottom: 10px;">Result search:</p>
					</div>
			  </div>
		 </li>
		 `;
		data.forEach((item) => {
			searchContainer.innerHTML += `
			<li data-cart-pid='11111' class="products-search__item item-product-search">
			<div class="item-product-search__imageAndAction">
				<a href="${item.url}" class="item-product-search__image _ibg">
					<img src="img/product/${item.image}" alt="">
				</a>
			</div>
			<div class="item-product-search__body">
				<div class="item-product-search__content">
					<h5 class="item-product-search__title">${item.title}</h5>
					<div class="item-product-search__attribute">
						<div class="item-product-search__atr">
							<div class="item-product-search__atr-name">Farm:</div>
							<div class="item-product-search__atr-res">Tharamis Farm</div>
						</div>
						<div class="item-product-search__atr">
							<div class="item-product-search__atr-name">Fresheness:</div>
							<div class="item-product-search__atr-res">1 day old</div>
						</div>
					</div>
				</div>
				<div class="item-product-search__rating">
					<img src="img/product/rating4.png" alt="">
				</div>
				<div class="item-product-search__action">
					<div class="item-product-search__prices">
						<div class="item-product-search__price">${item.price} USD</div>
						<div class="item-product-search__price item-product-search__price_old">${item.priceOld}
						</div>
					</div>
				</div>

			</div>

		</li>
			  `
		})
	} else {
		searchContainer.innerHTML = ``;
		searchContainer.innerHTML = `
		<li class="head-item">
			 <div class="search-title">
				  <div class="search-descr">
						<p class="public">No products</p>
				  </div>
			 </div>
		</li>
		`;
	}
}

const reduceSearchData = (postItems, searchCategory) => {
	const searchValue = document.querySelector('#seach_inp').value.toLowerCase();

	const filteredPosts = postItems.filter((item) => {
		return (
			(item.title.toLowerCase().includes(searchValue)
				|| item.descriptionFirst.toLowerCase().includes(searchValue)) && (item.category.toLowerCase().includes(searchCategory) || searchCategory.includes('all_category'))
		)
	})
	return filteredPosts;
}

// Закрываем поиск по клиу не на него
document.addEventListener('click', function (e) {
	if (!e.target.closest('.resultInp') || !e.target.closest('#seach_inp')) {
		let body = document.querySelector('body');
		body.classList.remove('_lock');
		const seachBody = document.querySelector('.resultInp');
		seachBody.style.display = 'none';
	}
})



// ПОЛУЧЕНИЕ ПРОДУКТОВ НА СТРАНИЦУ КАТЕГОРИЙ ПО JSON GRID
let resultJsonProd = null;
async function getProducts() {
	const file = "json/products.json";
	let response = await fetch(file, { method: "GET" });

	if (response.ok) {
		resultJsonProd = await response.json();

		if (localStorage.getItem('gridOrList') === 'grid') {
			loadProducts(resultJsonProd);
		}
		if (localStorage.getItem('gridOrList') === 'list') {
			loadProductsList(resultJsonProd)
		}

		numProd(resultJsonProd);
	}
}
getProducts();


// Загрузка товаров в зависимости от категорий
function loadProducts(data) {
	// очистка старых товаров
	let productItems = document.querySelectorAll('article');

	for (let prod of productItems) {
		prod.remove();
	}
	// 

	const productsItems = document.querySelector('.products__items');
	data.products.forEach(function (elem) {
		const productId = elem.id;
		const productCategory = elem.category;
		const productSubCategory = elem.subcategory;
		const productUrl = elem.url;
		const productTitle = elem.title;
		const productText = elem.text;
		const productImage = elem.image;
		const productPrice = elem.price;
		const productPriceOld = elem.priceOld;
		const productRatingImg = elem.rating_img;
		const productLabels = elem.labels;

		function loadHtml() {
			let productTemplateStart = `<article data-pid="${productId}" class="products__item item-product">`;
			let productTemplateEnd = `</article>`;

			let productTemplateLabels = '';
			if (productLabels) {
				let productTemplateLabelsStart = `<div class="item-product__labels">`;
				let productTemplateLabelsEnd = `</div>`;
				let productTemplateLabelsContent = '';

				productLabels.forEach(labelItem => {
					productTemplateLabelsContent += `<div class="item-product__label item-product__label_${labelItem.type}">${labelItem.value}</div>`;
				});

				productTemplateLabels += productTemplateLabelsStart;
				productTemplateLabels += productTemplateLabelsContent;
				productTemplateLabels += productTemplateLabelsEnd;
			}

			let productTemplateImage = `
			<a href="${productUrl}" class="item-product__image p-image _ibg">
				<img src="img/product/${productImage}" alt="${productTitle}">
			</a>
		`;

			let productTemplateBodyStart = `<div class="item-product__body">`;
			let productTemplateBodyEnd = `</div>`;

			let productTemplateContent = `
			<div class="item-product__content">
				<h3 class="item-product__title">${productTitle}</h3>
				<div class="item-product__text">${productText}</div>
			</div>
		`;
			let productTemplateRating = '';
			if (productRatingImg) {
				productTemplateRating = `
			<div class="item-product__rating">
				<img src="img/product/${productRatingImg}" alt="">
			</div>
		`;
			}


			let productTemplateActionsStart = `<div class="item-product__action">`;
			let productTemplatePrices = '';
			let productTemplatePricesStart = `<div class="item-product__prices">`;
			let productTemplatePricesCurrent = `<div class="item-product__price">${productPrice} USD</div>`;
			let productTemplatePricesOld = '';
			if (productPriceOld) {
				productTemplatePricesOld = `<div class="item-product__price item-product__price_old">${productPriceOld}</div>`;
			}


			let productTemplatePricesEnd = `</div>`;

			productTemplatePrices = productTemplatePricesStart;
			productTemplatePrices += productTemplatePricesCurrent;
			if (productPriceOld) {
				productTemplatePrices += productTemplatePricesOld;
			}
			productTemplatePrices += productTemplatePricesEnd;

			let productTemplateActionsButtun = `<button class="item-product__button">Buy now</button>`;
			let productTemplateActionsEnd = `</div>`;
			let productTemplateActions = '';
			productTemplateActions += productTemplateActionsStart;
			productTemplateActions += productTemplatePrices;
			productTemplateActions += productTemplateActionsButtun;
			productTemplateActions += productTemplateActionsEnd;


			let productTemplateBody = '';
			productTemplateBody += productTemplateBodyStart;
			productTemplateBody += productTemplateContent;
			productTemplateBody += productTemplateRating;
			productTemplateBody += productTemplateActions;
			productTemplateBody += productTemplateBodyEnd;


			let productTemplate = '';
			productTemplate += productTemplateStart;
			productTemplate += productTemplateLabels;
			productTemplate += productTemplateImage;
			productTemplate += productTemplateBody;
			productTemplate += productTemplateEnd;


			productsItems.insertAdjacentHTML(
				'beforeend',
				productTemplate
			);

		}
		if (resNameByPage === productCategory || resNameByPage === productSubCategory) {
			loadHtml();
		}

	});
	let selValue = document.querySelector('#product-num-sel').value;
	productLoadByPage(selValue);

}
// отрисовка товаров по LIST ====================

function loadProductsList(resultJsonProd) {
	// очистка старых товаров
	let productItems = document.querySelectorAll('article');

	for (let prod of productItems) {
		prod.remove();
	}
	// 
	const productsItems = document.querySelector('.products__items');
	resultJsonProd.products.forEach(function (elem) {
		const productId = elem.id;
		const productCategory = elem.category;
		const productSubCategory = elem.subcategory;
		const productUrl = elem.url;
		const productTitle = elem.title;
		const productText = elem.text;
		const productImage = elem.image;
		const productPrice = elem.price;
		const productPriceOld = elem.priceOld;
		const productRatingImg = elem.rating_img;
		const productLabels = elem.labels;
		const productFreshness = elem.freshness;
		const productFarm = elem.farm;
		const productShipping = elem.shipping;

		function loadHtmlList() {
			let productTemplateStart = `<article data-pid="${productId}" class="products__item item-product-list">`;
			let productTemplateEnd = `</article>`;

			let productTemplateLabels = '';
			if (productLabels) {
				let productTemplateLabelsStart = `<div class="item-product-list__labels">`;
				let productTemplateLabelsEnd = `</div>`;
				let productTemplateLabelsContent = '';

				productLabels.forEach(labelItem => {
					productTemplateLabelsContent += `<div class="item-product-list__label item-product-list__label_${labelItem.type}">${labelItem.value}</div>`;
				});

				productTemplateLabels += productTemplateLabelsStart;
				productTemplateLabels += productTemplateLabelsContent;
				productTemplateLabels += productTemplateLabelsEnd;
			}

			let productTemplateImage = `
			<a href="${productUrl}" class="item-product-list__image p-image _ibg">
				<img src="img/product/${productImage}" alt="${productTitle}">
			</a>
		`;

			let productTemplateBodyStart = `<div class="item-product-list__body-list">`;
			let productTemplateBodyEnd = `</div>`;

			let productTemplateContentStart = `<div class="item-product-list__content">`
			let productTemplateContentEnd = `</div>`

			let productTemplateContentText = `
				<h3 class="item-product-list__title">${productTitle}</h3>
				<div class="item-product-list__text">${productText}</div>
		`;
			let productTemplateRating = '';
			if (productRatingImg) {
				productTemplateRating = `
			<div class="item-product-list__rating">
				<img src="img/product/${productRatingImg}" alt="">
			</div>
		`;
			}

			let productTemplateAttribute = `<div class="item-product-list__attribute">
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Fresheness</div>
				<div class="item-product-list__atr-res"><span>${productFreshness}</span></div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Farm</div>
				<div class="item-product-list__atr-res">${productFarm}</div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Delivery</div>
				<div class="item-product-list__atr-res">Europe</div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Stock</div>
				<div class="item-product-list__atr-res"><span>320 pcs</span></div>
			</div>
		</div>`;

			let productTemplateContent = '';

			productTemplateContent += productTemplateContentStart;
			productTemplateContent += productTemplateContentText;
			productTemplateContent += productTemplateRating;
			productTemplateContent += productTemplateAttribute;
			productTemplateContent += productTemplateContentEnd;



			let productTemplateActionsStart = `<div class="item-product-list__action">`;
			let productTemplatePrices = '';
			let productTemplatePricesStart = `<div class="item-product-list__prices">`;
			let productTemplatePricesCurrent = `<div class="item-product-list__price">${productPrice} USD</div>`;
			let productTemplatePricesOld = '';
			if (productPriceOld) {
				productTemplatePricesOld = `<div class="item-product-list__price item-product-list__price_old">${productPriceOld}</div>`;
			}

			let productTemplatePricesEnd = `</div>`;
			productTemplatePrices = productTemplatePricesStart;
			productTemplatePrices += productTemplatePricesCurrent;
			if (productPriceOld) {
				productTemplatePrices += productTemplatePricesOld;
			}
			productTemplatePrices += productTemplatePricesEnd;


			let productsTemplateShipping = `	<div class="item-product-list__ship">
			<div class="item-product-list__shipping">${productShipping}</div>
			<div class="item-product-list__delivery">Delivery in 1 day</div>
		</div>`;


			let productTemplateActionsButtun1 = `<button class="item-product-list__button">Buy now <span
			class="_icon-button_rigth"></span></button>`;
			let productTemplateActionsButtun2 = `<button class="item-product-list__button-whish"><span class="_icon-wishlist"></span> Add
			to wish list</button>`;
			let productTemplateActionsEnd = `</div>`;
			let productTemplateActions = '';
			productTemplateActions += productTemplateActionsStart;
			productTemplateActions += productTemplatePrices;
			productTemplateActions += productsTemplateShipping;
			productTemplateActions += productTemplateActionsButtun1;
			productTemplateActions += productTemplateActionsButtun2;
			productTemplateActions += productTemplateActionsEnd;


			let productTemplateBody = '';
			productTemplateBody += productTemplateBodyStart;
			productTemplateBody += productTemplateContent;
			productTemplateBody += productTemplateActions;
			productTemplateBody += productTemplateBodyEnd;


			let productTemplate = '';
			productTemplate += productTemplateStart;
			productTemplate += productTemplateLabels;
			productTemplate += productTemplateImage;
			productTemplate += productTemplateBody;
			productTemplate += productTemplateEnd;


			productsItems.insertAdjacentHTML(
				'beforeend',
				productTemplate
			);

		}
		if (resNameByPage === productCategory || resNameByPage === productSubCategory) {
			loadHtmlList()
		}



	});
	let selValue = document.querySelector('#product-num-sel').value;
	productLoadByPage(selValue);

}
// ПАГИНАЦИЯ ======================

// номера страниц=======

let selStart = 0;
// let selEnd = 8; === 9

document.querySelector('#product-num-sel').addEventListener('input', function () {
	let selValue = document.querySelector('#product-num-sel').value;
	productLoadByPage(selValue);
	showMoreF(1);

});


// функция распределения товаров по страницам
function productLoadByPage(selEnd) {
	let countProduct = document.querySelectorAll('article');
	let pageNumContainer = document.querySelector('.page__num');
	let numPage = Math.ceil(countProduct.length / selEnd);
	pageNumContainer.innerHTML = '';
	if (numPage > 0) {
		let i = 1;
		while (i <= numPage) {
			pageNumContainer.insertAdjacentHTML(
				'beforeend',
				`<div class="page__num-item">${i}</div>`
			)
			i++
		}
	} else {
		// let pageText = document.querySelector('.page__text');
		// pageText.remove();
	}

	// товары на стр=======
	function prodPage(num, numNext) {
		countProduct.forEach(function (elem, index) {

			if (index < numNext && index >= num) {
				elem.style.display = 'flex';
			} else {
				elem.style.display = 'none';
			}

		})
	}
	prodPage(selStart, selEnd)

	// клик на номере страницы
	let pageItems = document.querySelectorAll('.page__num-item');
	for (let i = 0; i < pageItems.length; i++) {

		pageItems[i].addEventListener('click', function () {

			// удаляем цвет выделенной страницы
			for (let items of pageItems) {
				items.classList.remove('_active');
			}
			// </удаляем цвет выделенной страницы
			selResEnd = pageItems[i].innerHTML * selEnd;
			selResStart = (pageItems[i].innerHTML - 1) * selEnd;

			prodPage(selResStart, selResEnd);
			scrollingUp();

			// добавляем цвет выделенной страницы

			pageItems[i].classList.add('_active');
			// удаляем ShowMore
			let pageShowMore = document.querySelector('.show__btn');
			pageShowMore.style.display = 'none';
		})
	}
	// добавляем ShowMore

	let pageShowMore = document.querySelector('.show__btn');
	if (pageItems.length > 1) {
		pageShowMore.style.display = 'flex';
	} else {
		pageShowMore.style.display = 'none';
	}

	// no products если фильтр ничего не вывел
	const productsItems = document.querySelector('.products__items');
	if (countProduct.length === 0) {
		productsItems.innerHTML = '<p>No products</p>'
	} else {

		noProd = document.querySelector('.products__items>p');
		if (noProd) {
			noProd.remove();
		}

	}

	let showBtn = document.getElementsByClassName('show__btn')[0];
	if (showBtn.classList.contains('_hold')) {
		showBtn.classList.remove('_hold');
	}
}

// ФИЛЬТРАЦИЯ ======================


function filterProduct() {
	// массив значений по которым сортировать
	let appliedFiltre = document.getElementsByClassName('applied__item');
	let checkNew = document.querySelector('#filter-top-new');
	let checkSale = document.querySelector('#filter-top-sale');
	let filterCheck = [];
	let filterApplied = [];
	if (checkNew.checked === true) {
		filterCheck.push('new new')
	}
	if (checkNew.checked === false) {
		filterCheck.splice(0, 1)
	}
	if (checkSale.checked === true) {
		filterCheck.push('sale sale')
	}
	if (checkSale.checked === false) {
		filterCheck.splice(1, 1)
	}

	for (let i = 0; i < appliedFiltre.length; i++) {
		// filterApplied.push(parseInt(appliedFiltre[i].innerText));
		filterApplied.push(appliedFiltre[i].innerText);
	}

	let resFilter = [...filterCheck, ...filterApplied];


	// очистка старых товаров

	let productItems = document.querySelectorAll('article');

	for (let prod of productItems) {
		prod.remove();
	}

	// </очистка старых товаров




	const productsItems = document.querySelector('.products__items');
	resultJsonProd.products.forEach(function (elem) {
		const productId = elem.id;
		const productCategory = elem.category;
		const productSubCategory = elem.subcategory;
		const productUrl = elem.url;
		const productTitle = elem.title;
		const productText = elem.text;
		const productImage = elem.image;
		const productPrice = elem.price;
		const productPriceOld = elem.priceOld;
		const productRatingImg = elem.rating_img;
		const productLabels = elem.labels;


		function loadHtml() {
			let productTemplateStart = `<article data-pid="${productId}" class="products__item item-product">`;
			let productTemplateEnd = `</article>`;

			let productTemplateLabels = '';
			if (productLabels) {
				let productTemplateLabelsStart = `<div class="item-product__labels">`;
				let productTemplateLabelsEnd = `</div>`;
				let productTemplateLabelsContent = '';

				productLabels.forEach(labelItem => {
					productTemplateLabelsContent += `<div class="item-product__label item-product__label_${labelItem.type}">${labelItem.value}</div>`;
				});

				productTemplateLabels += productTemplateLabelsStart;
				productTemplateLabels += productTemplateLabelsContent;
				productTemplateLabels += productTemplateLabelsEnd;
			}

			let productTemplateImage = `
				<a href="${productUrl}" class="item-product__image p-image _ibg">
					<img src="img/product/${productImage}" alt="${productTitle}">
				</a>
			`;

			let productTemplateBodyStart = `<div class="item-product__body">`;
			let productTemplateBodyEnd = `</div>`;

			let productTemplateContent = `
				<div class="item-product__content">
					<h3 class="item-product__title">${productTitle}</h3>
					<div class="item-product__text">${productText}</div>
				</div>
			`;
			let productTemplateRating = '';
			if (productRatingImg) {
				productTemplateRating = `
				<div class="item-product__rating">
					<img src="img/product/${productRatingImg}" alt="">
				</div>
			`;
			}


			let productTemplateActionsStart = `<div class="item-product__action">`;
			let productTemplatePrices = '';
			let productTemplatePricesStart = `<div class="item-product__prices">`;
			let productTemplatePricesCurrent = `<div class="item-product__price">${productPrice} USD</div>`;
			let productTemplatePricesOld = '';
			if (productPriceOld) {
				productTemplatePricesOld = `<div class="item-product__price item-product__price_old">${productPriceOld}</div>`;
			}


			let productTemplatePricesEnd = `</div>`;

			productTemplatePrices = productTemplatePricesStart;
			productTemplatePrices += productTemplatePricesCurrent;
			if (productPriceOld) {
				productTemplatePrices += productTemplatePricesOld;
			}
			productTemplatePrices += productTemplatePricesEnd;

			let productTemplateActionsButtun = `<button class="item-product__button">Buy now</button>`;
			let productTemplateActionsEnd = `</div>`;
			let productTemplateActions = '';
			productTemplateActions += productTemplateActionsStart;
			productTemplateActions += productTemplatePrices;
			productTemplateActions += productTemplateActionsButtun;
			productTemplateActions += productTemplateActionsEnd;


			let productTemplateBody = '';
			productTemplateBody += productTemplateBodyStart;
			productTemplateBody += productTemplateContent;
			productTemplateBody += productTemplateRating;
			productTemplateBody += productTemplateActions;
			productTemplateBody += productTemplateBodyEnd;


			let productTemplate = '';
			productTemplate += productTemplateStart;
			productTemplate += productTemplateLabels;
			productTemplate += productTemplateImage;
			productTemplate += productTemplateBody;
			productTemplate += productTemplateEnd;


			productsItems.insertAdjacentHTML(
				'beforeend',
				productTemplate
			);

		}
		function loadHtmlList() {
			let productTemplateStart = `<article data-pid="${productId}" class="products__item item-product-list">`;
			let productTemplateEnd = `</article>`;

			let productTemplateLabels = '';
			if (productLabels) {
				let productTemplateLabelsStart = `<div class="item-product-list__labels">`;
				let productTemplateLabelsEnd = `</div>`;
				let productTemplateLabelsContent = '';

				productLabels.forEach(labelItem => {
					productTemplateLabelsContent += `<div class="item-product-list__label item-product-list__label_${labelItem.type}">${labelItem.value}</div>`;
				});

				productTemplateLabels += productTemplateLabelsStart;
				productTemplateLabels += productTemplateLabelsContent;
				productTemplateLabels += productTemplateLabelsEnd;
			}

			let productTemplateImage = `
			<a href="${productUrl}" class="item-product-list__image p-image _ibg">
				<img src="img/product/${productImage}" alt="${productTitle}">
			</a>
		`;

			let productTemplateBodyStart = `<div class="item-product-list__body-list">`;
			let productTemplateBodyEnd = `</div>`;

			let productTemplateContentStart = `<div class="item-product-list__content">`
			let productTemplateContentEnd = `</div>`

			let productTemplateContentText = `
				<h3 class="item-product-list__title">${productTitle}</h3>
				<div class="item-product-list__text">${productText}</div>
		`;
			let productTemplateRating = '';
			if (productRatingImg) {
				productTemplateRating = `
			<div class="item-product-list__rating">
				<img src="img/product/${productRatingImg}" alt="">
			</div>
		`;
			}

			let productTemplateAttribute = `<div class="item-product-list__attribute">
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Fresheness</div>
				<div class="item-product-list__atr-res"><span>New</span> (Extra fresh)</div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Farm</div>
				<div class="item-product-list__atr-res">Grocery Tarm Fields</div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Delivery</div>
				<div class="item-product-list__atr-res">Europe</div>
			</div>
			<div class="item-product-list__atr">
				<div class="item-product-list__atr-name">Stock</div>
				<div class="item-product-list__atr-res"><span>320 pcs</span></div>
			</div>
		</div>`;

			let productTemplateContent = '';

			productTemplateContent += productTemplateContentStart;
			productTemplateContent += productTemplateContentText;
			productTemplateContent += productTemplateRating;
			productTemplateContent += productTemplateAttribute;
			productTemplateContent += productTemplateContentEnd;



			let productTemplateActionsStart = `<div class="item-product-list__action">`;
			let productTemplatePrices = '';
			let productTemplatePricesStart = `<div class="item-product-list__prices">`;
			let productTemplatePricesCurrent = `<div class="item-product-list__price">${productPrice} USD</div>`;
			let productTemplatePricesOld = '';
			if (productPriceOld) {
				productTemplatePricesOld = `<div class="item-product-list__price item-product-list__price_old">${productPriceOld}</div>`;
			}

			let productTemplatePricesEnd = `</div>`;
			productTemplatePrices = productTemplatePricesStart;
			productTemplatePrices += productTemplatePricesCurrent;
			if (productPriceOld) {
				productTemplatePrices += productTemplatePricesOld;
			}
			productTemplatePrices += productTemplatePricesEnd;


			let productsTemplateShipping = `	<div class="item-product-list__ship">
			<div class="item-product-list__shipping">Free Shipping</div>
			<div class="item-product-list__delivery">Delivery in 1 day</div>
		</div>`;


			let productTemplateActionsButtun1 = `<button class="item-product-list__button">Buy now <span
			class="_icon-button_rigth"></span></button>`;
			let productTemplateActionsButtun2 = `<button class="item-product-list__button-whish"><span class="_icon-wishlist"></span> Add
			to wish list</button>`;
			let productTemplateActionsEnd = `</div>`;
			let productTemplateActions = '';
			productTemplateActions += productTemplateActionsStart;
			productTemplateActions += productTemplatePrices;
			productTemplateActions += productsTemplateShipping;
			productTemplateActions += productTemplateActionsButtun1;
			productTemplateActions += productTemplateActionsButtun2;
			productTemplateActions += productTemplateActionsEnd;


			let productTemplateBody = '';
			productTemplateBody += productTemplateBodyStart;
			productTemplateBody += productTemplateContent;
			productTemplateBody += productTemplateActions;
			productTemplateBody += productTemplateBodyEnd;


			let productTemplate = '';
			productTemplate += productTemplateStart;
			productTemplate += productTemplateLabels;
			productTemplate += productTemplateImage;
			productTemplate += productTemplateBody;
			productTemplate += productTemplateEnd;


			productsItems.insertAdjacentHTML(
				'beforeend',
				productTemplate
			);

		}



		if (resNameByPage === productCategory || resNameByPage === productSubCategory) {

			let arrKeysElem = []
			for (keys in elem) {
				arrKeysElem.push(`${keys} ${elem[keys]}`);
			}


			// console.log(arrKeysElem);
			// console.log(resFilter);


			if (resFilter.every(function (item) {
				if (item.indexOf('min') > 0) {

					if (productPrice >= parseInt(item)) {

						return true;
					}
				}
				if (item.indexOf('max') > 0) {
					if (productPrice <= parseInt(item)) {
						return true;
					}
				}


				if (item.indexOf('min') === -1 && item.indexOf('max') === -1) {

					for (let i = 0; i < arrKeysElem.length; i++) {
						if (item === arrKeysElem[i]) {
							return true;
						}
					}
				}

			})) {
				let grid = document.querySelector('.list-item__list-grid');
				let list = document.querySelector('.list-item__list-view');
				if (grid.classList.contains('_active')) {
					loadHtml();
				}
				if (list.classList.contains('_active')) {
					loadHtmlList();
				}
			}


		}


	});

	let selValue = document.querySelector('#product-num-sel').value;
	productLoadByPage(selValue);

}


// КОЛЛИЧЕСТВО ТОВАРОВ ======================

function numProd(prodAll) {
	// категории количество товаров
	let categoryItem = document.querySelectorAll('.category__item');

	for (let i = 0; i < categoryItem.length; i++) {
		let num = 0;
		prodAll.products.forEach(function (elem) {
			const productSubCategory = elem.subcategory;

			if (productSubCategory === categoryItem[i].firstElementChild.firstElementChild.innerHTML) {
				categoryItem[i].lastElementChild.innerHTML = ++num;
			}
		});
	}
	// общее количество товаров

	let numprod = document.querySelector('.list-item__numprod');
	let countProduct = document.getElementsByTagName('article');
	numprod.innerHTML = countProduct.length;

}



// SHOWMORE ======================
function showMoreF(num) {

	document.querySelector('.show__btn').addEventListener('click', function () {
		let selValue = document.querySelector('#product-num-sel').value;
		++num;
		resValue = selValue * num;
		let showBtn = document.querySelector('.show__btn');
		showBtn.classList.add('_hold');
		productLoadByPage(resValue);
	})
}

showMoreF(1);

// Убираем LIST ITEM при изменении ширины экрана

window.addEventListener(`resize`, function (e) {
	if (e.target.innerWidth < '1183') {
		localStorage.setItem('gridOrList', 'grid')
		addGrid();
		loadProducts(resultJsonProd);
		filterProduct();
	}
});



// ФУНКЦИОНАЛ ДОБАВЛЕНИЯ ТОВАРОВ В КОРЗИНУ===========================================


let productBody = document.querySelector('.products');
productBody.addEventListener('click', function (e) {
	if (e.target.classList.contains('item-product__button') || e.target.classList.contains('item-product-list__button')) {
		const productId = e.target.closest('.products__item').dataset.pid;
		addToCard(e.target, productId);
	}
})

function addToCard(productButton, productId) {
	if (!productButton.classList.contains('_hold')) {
		productButton.classList.add('_hold');
		productButton.classList.add('_fly');

		const card = document.querySelector('.header-body__basked')
		const product = document.querySelector(`[data-pid="${productId}"]`)
		const productImage = product.querySelector('.p-image');

		const productImageFly = productImage.cloneNode(true);

		const productImageFlyWigth = productImage.offsetWidth;
		const productImageFlyHeight = productImage.offsetHeight;
		const productImageFlytop = productImage.getBoundingClientRect().top;
		const productImageFlyLeft = productImage.getBoundingClientRect().left;

		productImageFly.setAttribute('class', '_flyImage _ibg');
		productImageFly.style.cssText = `
		left: ${productImageFlyLeft}px;
		top: ${productImageFlytop}px;
		width: ${productImageFlyWigth}px;
		height: ${productImageFlyHeight}px;
		`;
		document.body.append(productImageFly);

		const cardFlyLeft = card.getBoundingClientRect().left;
		const cardFlyTop = card.getBoundingClientRect().top;

		productImageFly.style.cssText = `
		left: ${cardFlyLeft}px;
		top: ${cardFlyTop}px;
		width: 0px;
		height: 0px;
		opacity:0;
		`;

		productImageFly.addEventListener('transitionend', function () {
			if (productButton.classList.contains('_fly')) {
				productImageFly.remove();
				updateCart(productButton, productId);
				productButton.classList.remove('_fly');
			}

		});
	}
}
// Добавляемм товары в корзину и удаляем(универсальная функция)
// function updateCart(productButton, productId, productAdd = true, productFocus = true) {

// 	const cart = document.querySelector('.header-body__basked');
// 	const cartQuantity = cart.querySelector('.header-body__add');
// 	const cartProduct = document.querySelector(`[data-cart-pid="${productId}"]`);
// 	const cartList = document.querySelector('.cart-list');

// 	// Добавляем

// 	if (productAdd) {
// 		if (cartQuantity) {
// 			if (!productFocus) {
// 				const cartProductQuantity = cartList.querySelectorAll('.pcs__input');
// 				let resultSumm = 0;
// 				for (let i = 0; i < cartProductQuantity.length; i++) {
// 					resultSumm += Number(cartProductQuantity[i].value)
// 				}
// 				console.log(resultSumm)
// 				cartQuantity.innerHTML = resultSumm;
// 			} else {
// 				cartQuantity.innerHTML = ++cartQuantity.innerHTML;
// 			}

// 		} else {
// 			cart.insertAdjacentHTML('beforeend', '<div class="header-body__add">1</div>')

// 		}

// 		if (!cartProduct) {
// 			const product = document.querySelector(`[data-pid="${productId}"]`);
// 			if (product.classList.contains('item-product-list')) {
// 				const cartProductImage = product.querySelector('.item-product-list__image').innerHTML;
// 				const cartProductTitle = product.querySelector('.item-product-list__title').innerHTML;
// 				const cartProductPrice = product.querySelector('.item-product-list__price').innerHTML;
// 				const cartProductPriceOld = product.querySelector('.item-product-list__price_old').innerHTML;
// 				const cartProductRating = product.querySelector('.item-product-list__rating').innerHTML;
// 				const cartProductContent = `
// 				<div class="item-product-basket__imageAndAction">
// 					<a href="#" class="item-product-basket__image _ibg">
// 						${cartProductImage}
// 					</a>
// 					<div class="item-product-basket__whishlist actionItems">
// 						<div class="_icon-wishlist actionItems__img"></div>
// 						<div class="actionItems__text">Wishlist</div>
// 					</div>
// 					<div class="item-product-basket__compare actionItems">
// 						<div class="_icon-compare actionItems__img"></div>
// 						<div class="actionItems__text">Compare</div>
// 					</div>
// 					<div class="item-product-basket__remove actionItems">
// 						<div class="_icon-remove actionItems__img"></div>
// 						<div class="actionItems__text">Remove</div>
// 					</div>
// 				</div>
// 				<div class="item-product-basket__body">
// 					<div class="item-product-basket__content">
// 						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
// 						<div class="item-product-basket__attribute">
// 							<div class="item-product-basket__atr">
// 								<div class="item-product-basket__atr-name">Farm:</div>
// 								<div class="item-product-basket__atr-res">Tharamis Farm</div>
// 							</div>
// 							<div class="item-product-basket__atr">
// 								<div class="item-product-basket__atr-name">Fresheness:</div>
// 								<div class="item-product-basket__atr-res">1 day old</div>
// 							</div>
// 						</div>
// 					</div>
// 					<div class="item-product-basket__rating">
// 						${cartProductRating}
// 					</div>
// 					<div class="item-product-basket__action">
// 						<div class="item-product-basket__prices">
// 							<div class="item-product-basket__price">${cartProductPrice}</div>
// 							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
// 						</div>
// 						<div class="item-product-basket__pcs pcs">
// 							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
// 							<span class="pcs__plash">|</span>
// 							<div class="pcs__text">Pcs</div>
// 						</div>

// 					</div>

// 				</div>`;

// 				cartList.insertAdjacentHTML(
// 					'beforeend',
// 					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
// 				);
// 			}
// 			if (product.classList.contains('item-product')) {
// 				const cartProductImage = product.querySelector('.item-product__image').innerHTML;
// 				const cartProductTitle = product.querySelector('.item-product__title').innerHTML;
// 				const cartProductPrice = product.querySelector('.item-product__price').innerHTML;
// 				const cartProductPriceOld = product.querySelector('.item-product__price_old').innerHTML;
// 				const cartProductRating = product.querySelector('.item-product__rating').innerHTML;
// 				const cartProductContent = `
// 				<div class="item-product-basket__imageAndAction">
// 					<a href="#" class="item-product-basket__image _ibg">
// 						${cartProductImage}
// 					</a>
// 					<div class="item-product-basket__whishlist actionItems">
// 						<div class="_icon-wishlist actionItems__img"></div>
// 						<div class="actionItems__text">Wishlist</div>
// 					</div>
// 					<div class="item-product-basket__compare actionItems">
// 						<div class="_icon-compare actionItems__img"></div>
// 						<div class="actionItems__text">Compare</div>
// 					</div>
// 					<div class="item-product-basket__remove actionItems">
// 						<div class="_icon-remove actionItems__img"></div>
// 						<div class="actionItems__text">Remove</div>
// 					</div>
// 				</div>
// 				<div class="item-product-basket__body">
// 					<div class="item-product-basket__content">
// 						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
// 						<div class="item-product-basket__attribute">
// 							<div class="item-product-basket__atr">
// 								<div class="item-product-basket__atr-name">Farm:</div>
// 								<div class="item-product-basket__atr-res">Tharamis Farm</div>
// 							</div>
// 							<div class="item-product-basket__atr">
// 								<div class="item-product-basket__atr-name">Fresheness:</div>
// 								<div class="item-product-basket__atr-res">1 day old</div>
// 							</div>
// 						</div>
// 					</div>
// 					<div class="item-product-basket__rating">
// 						${cartProductRating}
// 					</div>
// 					<div class="item-product-basket__action">
// 						<div class="item-product-basket__prices">
// 							<div class="item-product-basket__price">${cartProductPrice}</div>
// 							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
// 						</div>
// 						<div class="item-product-basket__pcs pcs">
// 							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
// 							<span class="pcs__plash">|</span>
// 							<div class="pcs__text">Pcs</div>
// 						</div>

// 					</div>

// 				</div>`;

// 				cartList.insertAdjacentHTML(
// 					'beforeend',
// 					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
// 				);
// 			}



// 		} else {

// 			const cartProductQuantity = cartProduct.querySelector('.pcs__input');
// 			if (productFocus) {
// 				cartProductQuantity.value = ++cartProductQuantity.value;
// 			}


// 		}
// 		productButton.classList.remove('_hold');
// 	} else {
// 		const cartProductQuantity = cartProduct.querySelector('.pcs__input');

// 		cartProductQuantity.value = --cartProductQuantity.value;
// 		if (!parseInt(cartProductQuantity.value)) {
// 			cartProduct.remove();
// 		}
// 		const cartQuantityValue = --cartQuantity.innerHTML
// 		console.log(cartQuantityValue)
// 		if (cartQuantityValue) {

// 			// cartQuantityValue = cartQuantityValue;
// 		} else {
// 			cartQuantity.remove();

// 			const popup = document.querySelector('.popup-bascet');
// 			const pop_body = document.querySelector('.popup-bascet__body');
// 			const pop_background = document.querySelector('.popup-bascet__background ');
// 			const body = document.querySelector('body');

// 			popup.classList.remove('_active');
// 			pop_body.classList.remove('_active');
// 			pop_background.classList.remove('_active');
// 			body.classList.remove('_lock');
// 		}
// 	}
// 	resProductSumm();
// 	let resultCatdList = document.querySelector('.cart-list');
// 	localStorage.setItem('basket', resultCatdList.innerHTML);
// }









// Получение содержимого страницы категории==============================================

let urlPageSeach = window.location.search;
// let domainSeach = window.location.pathname + window.location.search;
let resPageName = urlPageSeach.split('-').join(' ');
let resNameByPage = resPageName.substr(1);

// Заменяем хлебные крошки
let breadCrumbs = document.querySelector('.bread-crumbs__this');
breadCrumbs.innerText = resNameByPage;

// Заменяем заголовок
let mainTitle = document.querySelector('.title-block__title');
mainTitle.innerHTML = resNameByPage;


// Работа с блоком категорий и брэндами 
let menuLink = document.querySelectorAll('.menu__link');
let menuSubLink = document.querySelectorAll('.menu__sub-link');
let categoryItems = document.querySelector('.category__items');
let brandContainer = document.querySelector('.section-brands__checkbox');

// Для подкатегоий
for (let i = 0; i < menuSubLink.length; i++) {
	if (window.location.href === menuSubLink[i].href) {

		let parentThisLi = menuSubLink[i].parentNode.parentNode.children;

		for (let n = 0; n < parentThisLi.length; n++) {
			categoryItems.insertAdjacentHTML(
				'beforeBegin',
				`<li class="category__item">
					<div class="category__name">${parentThisLi[n].innerHTML}</div>
					<div class="category__product">${0}</div>
				</li>`
			)
		}

		// брэнды
		brandContainer.insertAdjacentHTML(
			'beforeBegin',
			`<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-1"
					id='section-brands-1'>
				<label for="section-brands-1" class="checkbox__text">${menuSubLink[i].innerHTML} brand 1</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-2"
					id='section-brands-2'>
				<label for="section-brands-2" class="checkbox__text">${menuSubLink[i].innerHTML} brand 2</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-3"
					id='section-brands-3'>
				<label for="section-brands-3" class="checkbox__text">${menuSubLink[i].innerHTML} brand 3</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-4"
					id='section-brands-4'>
				<label for="section-brands-4" class="checkbox__text">${menuSubLink[i].innerHTML} brand 4</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-5"
					id='section-brands-5'>
				<label for="section-brands-5" class="checkbox__text">${menuSubLink[i].innerHTML} brand 5</label>
			</div>`)

	}

}
// Для категорий
for (let i = 0; i < menuLink.length; i++) {

	if (window.location.href === menuLink[i].href) {

		let parentThis = menuLink[i].parentNode.nextElementSibling;

		if (parentThis !== null) {
			let parentThisLi = menuLink[i].parentNode.nextElementSibling.children;
			for (let n = 0; n < parentThisLi.length; n++) {
				categoryItems.insertAdjacentHTML(
					'beforeBegin',
					`<li class="category__item">
						<div class="category__name">${parentThisLi[n].innerHTML}</div>
						<div class="category__product">${0}</div>
					</li>`
				)
			}
		} else {
			// let categoryTit = document.querySelector('.filter__category');
			// categoryTit.remove();
		}



		// брэнды
		brandContainer.insertAdjacentHTML(
			'beforeBegin',
			`<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-1"
					id='section-brands-1'>
				<label for="section-brands-1" class="checkbox__text">${menuLink[i].innerHTML} brand 1</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-2"
					id='section-brands-2'>
				<label for="section-brands-2" class="checkbox__text">${menuLink[i].innerHTML} brand 2</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-3"
					id='section-brands-3'>
				<label for="section-brands-3" class="checkbox__text">${menuLink[i].innerHTML} brand 3</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-4"
					id='section-brands-4'>
				<label for="section-brands-4" class="checkbox__text">${menuLink[i].innerHTML} brand 4</label>
			</div>
			<div class="section-brands__check checkbox">
				<input class="checkbox__inp" type="checkbox" name="section-brands-5"
					id='section-brands-5'>
				<label for="section-brands-5" class="checkbox__text">${menuLink[i].innerHTML} brand 5</label>
			</div>`)

	}

}




// удаляем классы из верхнего меню
let categoryNameItem = document.querySelectorAll('.category__name>a');
for (let i = 0; i < categoryNameItem.length; i++) {
	categoryNameItem[i].classList.remove('menu__sub-link');

}

// Делаем зеленой активную ссылку
let categoryName = document.querySelectorAll('.category__name>a');
for (let k = 0; k < categoryName.length; k++) {

	if (categoryName[k].href === window.location.href) {
		categoryName[k].style.color = '#6a983c';
	}
}





// </Получение содержимого страницы категории==============================================

// ПЕРЕКЛЮЧЕНИЕ с LIST на GRID ============================================================
// кнопки и текст ==============
function addGrid() {
	let itemGrid = document.querySelector('.list-item__list-grid');
	let itemList = document.querySelector('.list-item__list-view');
	let iconGrid = document.querySelector('._icon-Grid_view');
	let iconList = document.querySelector('._icon-list_view');
	let productsItems = document.querySelector('.products__items');
	iconList.classList.remove('_active');
	itemList.classList.remove('_active');
	itemGrid.classList.add('_active');
	iconGrid.classList.add('_active');
	productsItems.classList.remove('_list');

}
function addList() {
	let itemGrid = document.querySelector('.list-item__list-grid');
	let itemList = document.querySelector('.list-item__list-view');
	let iconGrid = document.querySelector('._icon-Grid_view');
	let iconList = document.querySelector('._icon-list_view');
	let productsItems = document.querySelector('.products__items');
	iconGrid.classList.remove('_active');
	itemList.classList.add('_active');
	itemGrid.classList.remove('_active');
	iconList.classList.add('_active');
	productsItems.classList.add('_list');
}

if (localStorage.getItem('gridOrList') === 'grid') {
	addGrid();
}
if (localStorage.getItem('gridOrList') === 'list') {
	addList();
}

document.querySelector('.list-item__list-grid').addEventListener('click', function () {
	addGrid();
	loadProducts(resultJsonProd);
	localStorage.setItem('gridOrList', 'grid')
	filterProduct()
});

document.querySelector('.list-item__list-view').addEventListener('click', function () {
	addList();
	loadProductsList(resultJsonProd);
	localStorage.setItem('gridOrList', 'list')
	filterProduct()
});


// ФИЛЬТР СВЕРХУ  ============================================================

// filter checked ============
let filterTop = document.querySelectorAll('.filter-top input');
for (let i = 0; i < filterTop.length; i++) {
	filterTop[i].addEventListener('click', function () {
		let checkboxText = filterTop[i].nextElementSibling;
		checkboxText.classList.toggle('_active');
		appliedClose();
		filterProduct();
	})
}






// появление applied для фильтра сверху






// filter close ============
function appliedClose() {
	let filterClose = document.getElementsByClassName('applied__filtre__close');
	for (let close of filterClose) {
		close.addEventListener('click', function () {
			close.parentNode.remove();
			filterProduct();
		})
	}

}




// FILTER RIGTH ================================================================================
// prise slider========
// var priceSlider = document.querySelector('#price-filter');

// noUiSlider.create(priceSlider, {
// 	start: [00, 500],
// 	connect: true,
// 	step: 1,
// 	range: {
// 		'min': 0,
// 		'max': 500
// 	}
// });

// let inputStart = document.querySelector('#price-filter-start');
// let inputEnd = document.querySelector('#price-filter-end');
// let inpArr = [inputStart, inputEnd];
// priceSlider.noUiSlider.on('update', function (values, handle) {
// 	inputStart.value = Math.round(values[0]);
// 	inputEnd.value = Math.round(values[1]);
// 	console.log(inputStart.value, inputEnd.value)
// })

// inputStart.addEventListener('input', function () {
// 	priceSlider.noUiSlider.setHandle(0, inputStart.value)
// })
// inputEnd.addEventListener('input', function () {
// 	priceSlider.noUiSlider.setHandle(1, inputEnd.value)
// })

// для ползунков из импута
// для ползунков из импута
let sliderOne = document.getElementById("range-input-1");
let sliderTwo = document.getElementById("range-input-2");
let inputStart = document.getElementById('price-filter-start');
let inputEnd = document.getElementById('price-filter-end');

let sliderTrack = document.querySelector(".price-filter__slider");
let sliderMaxValue = document.getElementById("range-input-1").max;

let minGap = 0;
inputStart.value = 0;
inputEnd.value = 500;
sliderOne.addEventListener('input', function () {
	if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {
		sliderOne.value = parseInt(sliderTwo.value) - minGap;
	}
	inputStart.value = sliderOne.value;
	fillColor();
})
sliderTwo.addEventListener('input', function () {
	if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {
		sliderTwo.value = parseInt(sliderOne.value) + minGap;
	}
	inputEnd.value = sliderTwo.value;
	fillColor();
})

function fillColor() {
	let percent1 = (sliderOne.value / sliderMaxValue) * 100;
	let percent2 = (sliderTwo.value / sliderMaxValue) * 100;
	sliderTrack.style.background = `linear-gradient(to right, #EBEBEB ${percent1}% , #6A983C ${percent1}% , #6A983C ${percent2}%, #EBEBEB ${percent2}%)`;
}



// для ввода из импута
inputStart.addEventListener('input', function () {
	if (inputStart.value <= sliderMaxValue) {
		sliderOne.value = inputStart.value;
		fillColor();
	}
})
inputEnd.addEventListener('input', function () {
	if (inputEnd.value <= sliderMaxValue) {
		sliderTwo.value = inputEnd.value;
		fillColor();
	}
})
// при потере фокуса установить значение================

inputStart.addEventListener('focusout', function () {
	if (inputStart.value < 0) {
		inputStart.value = 0;
		if (inputStart.value <= sliderMaxValue) {
			sliderOne.value = inputStart.value;
			fillColor();
		}
	}
	if (inputStart.value > 500) {
		inputStart.value = 500;
		if (inputStart.value <= sliderMaxValue) {
			sliderOne.value = inputStart.value;
			fillColor();
		}
	}
	if (inputStart.value > inputEnd.value) {
		inputStart.value = inputEnd.value;
		if (inputStart.value <= sliderMaxValue) {
			sliderOne.value = inputStart.value;
			fillColor();
		}
	}

})
inputEnd.addEventListener('focusout', function () {
	if (inputEnd.value < 0) {
		inputEnd.value = 0;
		if (inputEnd.value <= sliderMaxValue) {
			sliderTwo.value = inputEnd.value;
			fillColor();
		}
	}
	if (inputEnd.value > 500) {
		inputEnd.value = 500;
		if (inputEnd.value <= sliderMaxValue) {
			sliderTwo.value = inputEnd.value;
			fillColor();
		}
	}
	if (inputStart.value > inputEnd.value) {
		inputEnd.value = inputStart.value;
		if (inputStart.value <= sliderMaxValue) {
			sliderTwo.value = inputEnd.value;
			fillColor();
		}
	}
})



//</prise slider============

// checkboxBrands==============

let filterCheck = document.getElementById('filter').getElementsByTagName('input')

for (let i = 0; i < filterCheck.length; i++) {
	if (filterCheck[i].type === 'checkbox') {
		filterCheck[i].addEventListener('click', function () {
			let checkboxText = filterCheck[i].nextElementSibling;
			checkboxText.classList.toggle('_active')
		})
	}

}


// checkboxRating==================

// let filterRating = document.querySelectorAll('.section-rating__checkbox input');

// for (let i = 0; i < filterRating.length; i++) {
// 	filterRating[i].addEventListener('click', function () {
// 		let checkboxText = filterRating[i].nextElementSibling;
// 		checkboxText.classList.toggle('_active')
// 	})
// }

// Работа с формами отправить и удалить

let formSidebar = document.querySelector('.form-sidebar');

formSidebar.addEventListener('reset', function (e) {
	e.preventDefault();
	let inpForm = document.querySelectorAll('.form-sidebar input');
	inpForm.forEach(function (elem, index) {
		if (elem.type === 'number') {
			if (index === 2) {
				elem.value = 0;
				sliderOne.value = 0;
			}
			if (index === 3) {
				elem.value = 500;
				sliderTwo.value = 500;
			}
		}
		if (elem.type === 'checkbox') {
			elem.checked = false;
			let checkboxText = elem.nextElementSibling;
			checkboxText.classList.remove('_active');
		}
	})
	fillColor();
})


// appyFilterRezultFilt=================================================
let formItemArr = ['min', 'max', 'brand 1', 'brand 2', 'brand 3', 'brand 4', 'brand 5', 'rating 5', 'rating 4', 'rating 3', 'rating 2', 'rating 1'];
formSidebar.addEventListener('submit', function (e) {
	e.preventDefault();
	scrollingUp();

	let formFilterArr = [];
	let appliedFilt = document.querySelector('.filter-top__applied');
	// удаляем предыдущие
	let appliedFilterItem = document.querySelectorAll('.applied__filtre');
	for (let item of appliedFilterItem) {
		// item.style.display = 'none';
		item.remove();
	}
	// </удаляем предыдущие

	let inpForm = document.querySelectorAll('.form-sidebar input');
	inpForm.forEach(function (elem, index) {
		if (elem.type === 'number') {
			if (index === 2) {
				formFilterArr.push(elem.value);
			}
			if (index === 3) {
				formFilterArr.push(elem.value);
			}
		}
		if (elem.type === 'checkbox') {
			formFilterArr.push(elem.checked);
		}
	})

	// добавляем наверх то что выбрано в фильтре===========

	formItemArr.forEach(function (elem, index) {
		if (index === 0) {
			appliedFilt.insertAdjacentHTML(
				'beforeend',
				`<div class= "applied__filtre" >
					<div class="applied__item">${formFilterArr[index]} ${elem}</div>
					<img class="applied__filtre__close" src="img/icons/category/filter-close.png" alt="">
			</div>`
			)
		}
		if (index === 1) {
			appliedFilt.insertAdjacentHTML(
				'beforeend',
				`<div class= "applied__filtre" >
					<div class="applied__item">${formFilterArr[index]} ${elem}</div>
					<img class="applied__filtre__close" src="img/icons/category/filter-close.png" alt="">
			</div>`
			)
		}
		if (formFilterArr[index] === true) {
			appliedFilt.insertAdjacentHTML(
				'beforeend',
				`<div class= "applied__filtre" >
					<div class="applied__item">${elem}</div>
					<img class="applied__filtre__close" src="img/icons/category/filter-close.png" alt="">
			</div>`)
		}
	})


	appliedClose()
	removeFilterMobile()
	filterProduct()
})


function scrollingUp() {
	window.scrollTo({
		top: 0,
		behavior: 'smooth'
	})
}

// мобильная адаптайия фильтра==================================

let numFilterIconClick = 0;
document.querySelector('.filter-icon').addEventListener('click', function () {
	let iconFiltre = document.querySelector('.filter-icon');
	numFilterIconClick++;
	if (numFilterIconClick % 2 === 0) {
		iconFiltre.lastElementChild.src = 'img/icons/category/filter_left.png';
		console.log(numFilterIconClick);
	} else {
		iconFiltre.lastElementChild.src = 'img/icons/category/filter_left_active.png';
		console.log(numFilterIconClick);
	}
	let filter = document.querySelector('.page__filter');
	let filterBg = document.querySelector('.page__plash');


	filter.classList.toggle('_active')
	filterBg.classList.toggle('_active')


})



function removeFilterMobile() {
	let filter = document.querySelector('.page__filter');
	let filterBg = document.querySelector('.page__plash');

	filter.classList.remove('_active')
	filterBg.classList.remove('_active')
}
// удаляем при нажатии на фон
document.querySelector('.page__plash').addEventListener('click', function () {
	let filterBg = document.querySelector('.page__plash');
	let filter = document.querySelector('.page__filter');
	filterBg.classList.remove('_active');
	filter.classList.remove('_active')
})


// Адаптивный фон============
function isIE() {
	ua = navigator.userAgent;
	var is_ie = ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1;
	return is_ie;
}

function ibg() {

	if (isIE()) {
		let ibg = document.querySelectorAll("._ibg");
		for (var i = 0; i < ibg.length; i++) {
			if (ibg[i].querySelector('img') && ibg[i].querySelector('img').getAttribute('src') != null) {
				ibg[i].style.backgroundImage = 'url(' + ibg[i].querySelector('img').getAttribute('src') + ')';
			}
		}
	}
}
ibg();

// ============
// Спойлер в подвале меню

let footer_title = document.querySelectorAll('.menu-footer__title');

for (let i = 0; i < footer_title.length; i++) {
	footer_title[i].onclick = footerSpoiler;
}

function footerSpoiler() {
	this.classList.toggle('_active');
	this.parentNode.lastElementChild.classList.toggle('_active');
}
// BASKET POPUP ====================================================================
// открываем
document.querySelector('._icon-header_basked').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');

	if (localStorage.getItem('cartlist')) {
		document.querySelector('.popup-bascet__product').innerHTML = localStorage.getItem('cartlist');
	}


	resProductSumm();

});
// закрываем на крестик
document.querySelector('.popup-bascet__icon-close').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');
	if (window.location.pathname === '/checkout.html') {
		document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
	}

});
// закрываем на фон 
document.querySelector('.popup-bascet__background').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

	if (window.location.pathname === '/checkout.html') {
		document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
	}


});

// переход на сайт go to shop
document.querySelector('.popup-bascet__goshop').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});
//  КОРЗИНА==================================


// Добавляемм товары в корзину и удаляем(универсальная функция)
function updateCart(productButton, productId, productAdd = true, productFocus = true) {

	const cart = document.querySelector('.header-body__basked');
	const cartQuantity = cart.querySelector('.header-body__add');
	const cartProduct = document.querySelector(`[data-cart-pid="${productId}"]`);
	const cartList = document.querySelector('.cart-list');

	// Добавляем

	if (productAdd) {
		if (cartQuantity) {
			if (!productFocus) {
				const cartProductQuantity = cartList.querySelectorAll('.pcs__input');
				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
			} else {
				cartQuantity.innerHTML = ++cartQuantity.innerHTML;
			}

		} else {
			cart.insertAdjacentHTML('beforeend', '<div class="header-body__add">1</div>')

		}

		if (!cartProduct) {
			const product = document.querySelector(`[data-pid="${productId}"]`);
			if (product.classList.contains('item-product-list')) {
				const cartProductUrl = product.querySelector('.item-product-list__image').href;
				const cartProductImage = product.querySelector('.item-product-list__image').innerHTML;
				const cartProductTitle = product.querySelector('.item-product-list__title').innerHTML;
				const cartProductPrice = product.querySelector('.item-product-list__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.item-product-list__price_old').innerHTML;
				const cartProductRating = product.querySelector('.item-product-list__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${cartProductUrl}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						${cartProductRating}
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}
			if (product.classList.contains('item-product')) {
				const cartProductUrl = product.querySelector('.item-product__image').href;
				const cartProductImage = product.querySelector('.item-product__image').innerHTML;
				const cartProductTitle = product.querySelector('.item-product__title').innerHTML;
				const cartProductPrice = product.querySelector('.item-product__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.item-product__price_old').innerHTML;
				const cartProductRating = product.querySelector('.item-product__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${cartProductUrl}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						${cartProductRating}
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}
			if (product.classList.contains('products-page')) {
				const value = product.querySelector('.pcs-prod__inputProd').value;
				const cartProductImage = product.querySelector('.product-img__first').innerHTML;
				const cartProductTitle = product.querySelector('.product-content__title').innerHTML;
				const cartProductPrice = product.querySelector('.product-content__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.product-content__price_old').innerHTML;
				// const cartProductRating = product.querySelector('.product-content__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${window.location}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						<img src="img/product/rating4.png" alt="">
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="${value}" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}


		} else {

			const cartProductQuantity = cartProduct.querySelector('.pcs__input');
			if (productFocus) {
				if (productButton.classList.contains('product-content__button')) {
					let inpForPage = productButton.parentNode.querySelector('.pcs-prod__inputProd');
					cartProductQuantity.value = +inpForPage.value + +cartProductQuantity.value;
				} else {
					cartProductQuantity.value = ++cartProductQuantity.value;
				}



				// для localStorage
				cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
			}


		}
		productButton.classList.remove('_hold');
	} else {
		const cartProductQuantity = cartProduct.querySelector('.pcs__input');

		cartProductQuantity.value = --cartProductQuantity.value;

		if (!parseInt(cartProductQuantity.value)) {
			cartProduct.remove();
		}
		const cartQuantityValue = --cartQuantity.innerHTML
		// для localStorage
		cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
		if (cartQuantityValue) {

			// cartQuantityValue = cartQuantityValue;
		} else {
			cartQuantity.remove();

			const popup = document.querySelector('.popup-bascet');
			const pop_body = document.querySelector('.popup-bascet__body');
			const pop_background = document.querySelector('.popup-bascet__background ');
			const body = document.querySelector('body');

			popup.classList.remove('_active');
			pop_body.classList.remove('_active');
			pop_background.classList.remove('_active');
			body.classList.remove('_lock');
		}
	}




	resProductSumm();



	const resultCartList = document.querySelector('.popup-bascet__product');
	const resultCartBasket = document.querySelector('.header-body__basked');
	localStorage.setItem('cartlist', resultCartList.innerHTML);
	localStorage.setItem('basket', resultCartBasket.innerHTML);


}


// удаление товаров из корзины
let basketBody = document.querySelector('.popup-bascet__product');
if (window.location.pathname !== '/checkout.html') {
	basketBody.addEventListener('click', function (e) {
		if (e.target.closest('.item-product-basket__remove')) {
			const productId = e.target.closest('.products-basket__item').dataset.cartPid;
			updateCart(e.target, productId, false);
			let inp = e.target.parentNode.parentNode.parentNode.querySelector('.pcs__input');
			inp.setAttribute('value', `${inp.value}`); // посмотреть!!!!
		}
		// go shop
		if (e.target.closest('.popup-bascet__goshop')) {
			let popup = document.querySelector('.popup-bascet');
			let pop_body = document.querySelector('.popup-bascet__body');
			let pop_background = document.querySelector('.popup-bascet__background ');
			let body = document.querySelector('body');


			popup.classList.remove('_active');
			pop_body.classList.remove('_active');
			pop_background.classList.remove('_active');
			body.classList.remove('_lock');
		}
	});



	basketBody.addEventListener('focusout', function (e) {
		if (e.target.closest('.pcs__input')) {

			if (e.target.value <= 0) {
				e.target.value = 1;
				e.target.setAttribute('value', '1');
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;
				updateCart(e.target, productId, true, false);

			} else {
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;

				e.target.setAttribute('value', `${e.target.value}`);

				updateCart(e.target, productId, true, false);
			}
			resProductSumm();
		}
	})
} else {
	basketBody.addEventListener('click', function (e) {
		if (e.target.closest('.item-product-basket__remove')) {
			const product = e.target.closest('.products-basket__item');
			const cartProductQuantity = product.querySelector('.pcs__input');
			const cart = document.querySelector('.header-body__basked');
			const cartQuantity = cart.querySelector('.header-body__add');

			cartProductQuantity.value = --cartProductQuantity.value;

			if (!parseInt(cartProductQuantity.value)) {
				product.remove();
			}
			const cartQuantityValue = --cartQuantity.innerHTML
			// для localStorage
			cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
			if (cartQuantityValue) {

				// cartQuantityValue = cartQuantityValue;
			} else {
				cartQuantity.remove();
				const popup = document.querySelector('.popup-bascet');
				const pop_body = document.querySelector('.popup-bascet__body');
				const pop_background = document.querySelector('.popup-bascet__background ');
				const body = document.querySelector('body');

				popup.classList.remove('_active');
				pop_body.classList.remove('_active');
				pop_background.classList.remove('_active');
				body.classList.remove('_lock');

			}


			let inp = e.target.parentNode.parentNode.parentNode.querySelector('.pcs__input');
			inp.setAttribute('value', `${inp.value}`); // посмотреть!!!!
			const resultCartList = document.querySelector('.popup-bascet__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);

			document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
			resProductSumm()
			resProductSummOrder()
		}

	});
	basketBody.addEventListener('focusout', function (e) {
		if (e.target.closest('.pcs__input')) {

			const cartProductQuantity = basketBody.querySelectorAll('.pcs__input');
			const cart = document.querySelector('.header-body__basked');
			const cartQuantity = cart.querySelector('.header-body__add');
			if (e.target.value <= 0) {
				e.target.value = 1;
				e.target.setAttribute('value', '1');

				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
				resProductSumm()
				resProductSummOrder()

			} else {
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;

				e.target.setAttribute('value', `${e.target.value}`);

				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
			}
			const resultCartList = document.querySelector('.popup-bascet__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);
			document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
			resProductSumm();
			resProductSummOrder()
		}
	})
}

// Подсчет стоимости

function resProductSumm() {
	let basketBody = document.querySelector('.popup-bascet__product');
	const product = basketBody.querySelectorAll('.item-product-basket');
	let resSumm = 0;
	for (let i = 0; i < product.length; i++) {
		const summ = product[i].querySelector('.item-product-basket__price').innerHTML;
		const pcs = product[i].querySelector('.pcs__input').value;

		resSumm += parseInt(summ) * +pcs;
	}

	const res = document.querySelector('.popup-bascet__result-sum');
	res.innerHTML = `${resSumm} USD`;

	goCheckNext();
};

// оформление если в корзине что то есть 
function goCheckNext() {
	let goCheck = document.querySelector('.popup-bascet__gotocheck');
	let numSumm = document.querySelector('.cart-list').children.length;
	if (numSumm === 0) {
		goCheck.style.display = 'none';
	} else {
		goCheck.style.display = 'block';
	}
}














// USER POPUP ====================================================================

// открываем
document.querySelector('._icon-header_user').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');


	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');

});

// открываем из мобильного меню
document.querySelector('.menu__user-row').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');



	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');


	// одновременно прячем мобильное меню
	let burger_icon = document.querySelector('.menu__icon');
	let mobile_menu = document.querySelector('.menu__body');
	let before_background = document.querySelector('.menu__before-background');
	let menu__button_burger = document.querySelector('.menu__button-burger');
	let user_singin = document.querySelector('.menu__user')

	burger_icon.classList.remove('_active');
	mobile_menu.classList.remove('_active');
	before_background.classList.remove('_active');
	menu__button_burger.classList.remove('_active');
	user_singin.classList.remove('_active');


});


// закрываем на крестик
document.querySelector('.popup-user__icon-close').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});
// закрываем на фон 
document.querySelector('.popup-user__background').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');

	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});


// ============================================================================================

