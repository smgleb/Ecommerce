//HEADER====================================================================================

if (localStorage.getItem('cartlist')) {
	document.querySelector('.popup-bascet__product').innerHTML = localStorage.getItem('cartlist');
}

if (localStorage.getItem('basket')) {
	document.querySelector('.header-body__basked').innerHTML = localStorage.getItem('basket');
}
resProductSumm();


// меняем иконку в выборе категорий в поиске + выпадающее меню категории
document.querySelector('.header-body__category').addEventListener('click', function () {
	let seach_category = document.querySelector('#icon-category');
	if (seach_category.classList.contains('_icon-header_seach_category')) {
		seach_category.className = "_icon-header_seach_category_deg";
	} else {
		seach_category.className = "_icon-header_seach_category";
	}

	//выпадающее меню категории
	let menu_category = document.querySelector('.header-body__list');
	menu_category.classList.toggle('active');
});

// Выбор категории
let category = document.querySelectorAll('.header-body__link');
for (let i = 0; i < category.length; i++) {
	category[i].onclick = getCategory;
}
function getCategory() {
	let catResult = document.querySelector('.header-body__res-category');
	catResult.innerHTML = this.innerHTML;
	catResult.setAttribute('id', `${this.id}`);
}



// запоминаем историю поиска
function HashSeach() {
	_seachHistory = {};

	this.addValue = function (key, value) {
		return _seachHistory[key] = value;
	}
	this.showHistory = function () {
		return _seachHistory;
	}
}

let history = new HashSeach();


// Меню ==================================================
//навигация

let category_menu = document.querySelectorAll('.menu__link-container');
for (let i = 0; i < category_menu.length; i++) {
	category_menu[i].onclick = showSubCategory;
}
function showSubCategory() {
	if (this.parentNode.children[1] !== undefined) {
		let par = this.parentNode;
		par.lastElementChild.classList.toggle('active')
	}

}

//разворот бургера

document.querySelector('.menu__icon').addEventListener('click', function () {
	let burger_icon = document.querySelector('.menu__icon');
	let mobile_menu = document.querySelector('.menu__body');
	let before_background = document.querySelector('.menu__before-background');
	let menu__button_burger = document.querySelector('.menu__button-burger');
	let user_singin = document.querySelector('.menu__user');
	let body = document.querySelector('body');

	burger_icon.classList.toggle('_active');
	mobile_menu.classList.toggle('_active');
	before_background.classList.toggle('_active');
	menu__button_burger.classList.toggle('_active');
	user_singin.classList.toggle('_active');
	body.classList.toggle('_lock');
	// фон назакрытие меню бургер
	before_background.onclick = function () {
		burger_icon.classList.remove('_active');
		mobile_menu.classList.remove('_active');
		before_background.classList.remove('_active');
		menu__button_burger.classList.remove('_active');
		user_singin.classList.remove('_active');
		body.classList.remove('_lock');
	}
});

// нажимание кнопок категория и меню в развороте бургера
let btn_category = document.querySelector('#menu-btn-category');
let btn_menu = document.querySelector('#menu-btn-menu');
let menu_list_category = document.querySelector('.menu__list_category');
let menu_list_menu = document.querySelector('.menu__list_menu');


document.querySelector('#menu-btn-category').addEventListener('click', function () {
	btn_category.classList.add('_active');
	btn_menu.classList.remove('_active');

	menu_list_category.classList.remove('_deactive');
	menu_list_menu.classList.add('_deactive');

})
document.querySelector('#menu-btn-menu').addEventListener('click', function () {
	btn_menu.classList.add('_active');
	btn_category.classList.remove('_active');

	menu_list_category.classList.add('_deactive');
	menu_list_menu.classList.remove('_deactive');

})

// ПОИСК =============================================================================================
// Получение данных категории и инпута
let resultJsonProdSearch = null;
async function getProductsSearch() {
	const file = "json/products.json";
	let response = await fetch(file, { method: "GET" });

	if (response.ok) {
		resultJsonProdSearch = await response.json();
	}
}

document.querySelector('#seach_inp').addEventListener('input', function () {
	let inp = document.querySelector('#seach_inp').value;
	if (inp.length >= 3) {
		const seachBody = document.querySelector('.resultInp');
		const searchCategory = document.querySelector('.header-body__res-category').id;

		seachBody.style.display = 'block';
		let body = document.querySelector('body');
		body.classList.add('_lock');
		renderSearchList(searchCategory);
	} else {

		const seachBody = document.querySelector('.resultInp');
		let body = document.querySelector('body');
		seachBody.style.display = 'none';
		body.classList.remove('_lock');
	}
})


const renderSearchList = async (searchCategory) => {
	let data = await getProductsSearch();
	const searchContainer = document.querySelector('.resultInp__ul');
	data = reduceSearchData(resultJsonProdSearch.products, searchCategory);

	if (data.length > 0) {
		searchContainer.innerHTML = ``;
		searchContainer.innerHTML = `
		 <li class="head-item">
			  <div class="search-title">
					<div class="search-descr">
						 <p class="public" style= "margin-bottom: 10px;">Result search:</p>
					</div>
			  </div>
		 </li>
		 `;
		data.forEach((item) => {
			searchContainer.innerHTML += `
			<li data-cart-pid='11111' class="products-search__item item-product-search">
			<div class="item-product-search__imageAndAction">
				<a href="${item.url}" class="item-product-search__image _ibg">
					<img src="img/product/${item.image}" alt="">
				</a>
			</div>
			<div class="item-product-search__body">
				<div class="item-product-search__content">
					<h5 class="item-product-search__title">${item.title}</h5>
					<div class="item-product-search__attribute">
						<div class="item-product-search__atr">
							<div class="item-product-search__atr-name">Farm:</div>
							<div class="item-product-search__atr-res">Tharamis Farm</div>
						</div>
						<div class="item-product-search__atr">
							<div class="item-product-search__atr-name">Fresheness:</div>
							<div class="item-product-search__atr-res">1 day old</div>
						</div>
					</div>
				</div>
				<div class="item-product-search__rating">
					<img src="img/product/rating4.png" alt="">
				</div>
				<div class="item-product-search__action">
					<div class="item-product-search__prices">
						<div class="item-product-search__price">${item.price} USD</div>
						<div class="item-product-search__price item-product-search__price_old">${item.priceOld}
						</div>
					</div>
				</div>

			</div>

		</li>
			  `
		})
	} else {
		searchContainer.innerHTML = ``;
		searchContainer.innerHTML = `
		<li class="head-item">
			 <div class="search-title">
				  <div class="search-descr">
						<p class="public">No products</p>
				  </div>
			 </div>
		</li>
		`;
	}
}

const reduceSearchData = (postItems, searchCategory) => {
	const searchValue = document.querySelector('#seach_inp').value.toLowerCase();

	const filteredPosts = postItems.filter((item) => {
		return (
			(item.title.toLowerCase().includes(searchValue)
				|| item.descriptionFirst.toLowerCase().includes(searchValue)) && (item.category.toLowerCase().includes(searchCategory) || searchCategory.includes('all_category'))
		)
	})
	return filteredPosts;
}

// Закрываем поиск по клиу не на него
document.addEventListener('click', function (e) {
	if (!e.target.closest('.resultInp') || !e.target.closest('#seach_inp')) {
		let body = document.querySelector('body');
		body.classList.remove('_lock');
		const seachBody = document.querySelector('.resultInp');
		seachBody.style.display = 'none';
	}
})

// выгружаем в order ===================
// изменение корзины через блок order
document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');



let checkProd = document.querySelector('.order__product');

checkProd.addEventListener('click', function (e) {
	if (e.target.closest('.item-product-basket__remove')) {

		const productId = e.target.closest('.products-basket__item').dataset.cartPid;

		updateCart(e.target, productId, false);

		let inp = e.target.parentNode.parentNode.parentNode.querySelector('.pcs__input');
		inp.setAttribute('value', `${inp.value}`); // посмотреть!!!!

		const resultCartList = document.querySelector('.order__product');
		const resultCartBasket = document.querySelector('.header-body__basked');
		localStorage.setItem('cartlist', resultCartList.innerHTML);
		localStorage.setItem('basket', resultCartBasket.innerHTML);
		resProductSummOrder()
	}
	// go shop
	if (e.target.closest('.popup-bascet__goshop')) {
		let popup = document.querySelector('.popup-bascet');
		let pop_body = document.querySelector('.popup-bascet__body');
		let pop_background = document.querySelector('.popup-bascet__background ');
		let body = document.querySelector('body');


		popup.classList.remove('_active');
		pop_body.classList.remove('_active');
		pop_background.classList.remove('_active');
		body.classList.remove('_lock');
	}
});


checkProd.addEventListener('focusout', function (e) {
	if (e.target.closest('.pcs__input')) {

		if (e.target.value <= 0) {
			e.target.value = 1;
			e.target.setAttribute('value', '1');
			const productId = e.target.closest('.products-basket__item').dataset.cartPid;
			updateCart(e.target, productId, true, false);

			const resultCartList = document.querySelector('.order__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);

		} else {
			const productId = e.target.closest('.products-basket__item').dataset.cartPid;

			e.target.setAttribute('value', `${e.target.value}`);

			updateCart(e.target, productId, true, false);

			const resultCartList = document.querySelector('.order__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);
		}
		resProductSumm();
		resProductSummOrder()
	}
})



// Подсчет сумм в блоке order
// let inpRes = checkProd.querySelectorAll('.pcs__input');
// let summ = document.querySelectorAll('.item-product-basket__price')
// let summ = checkProd.querySelectorAll('.pcs__input').value * parseInt(document)


// document.querySelector('.total__title')

function resProductSummOrder() {
	let orderBody = document.querySelector('.order__product');
	const product = orderBody.querySelectorAll('.item-product-basket');
	let resSumm = 0;
	for (let i = 0; i < product.length; i++) {
		const summ = product[i].querySelector('.item-product-basket__price').innerHTML;
		const pcs = product[i].querySelector('.pcs__input').value;

		resSumm += parseInt(summ) * +pcs;
	}

	const res = document.querySelector('.total__price');
	res.innerHTML = `${resSumm} USD`;

	const tax = document.querySelector('.total__price-persent');
	let resTax = resSumm * 0.17;
	tax.innerHTML = `17% ${resTax.toFixed(2)} USD`

	let ship = document.querySelector('.shipping').innerHTML;
	let shipRes = parseInt(ship);

	const resultFinal = document.querySelector('.final__summ');
	resultFinal.innerHTML = `${(resTax + resSumm + shipRes).toFixed(2)} USD`



	if (document.querySelector('.promo__inp').value === '1111') {
		const resultFinal = document.querySelector('.final__summ');
		resultFinal.innerHTML = `${(resTax + resSumm + shipRes).toFixed(2) - 100} USD`
	}

};
resProductSummOrder()

document.querySelector('.promo__inp').addEventListener('focusout', function () {
	const inp = document.querySelector('.promo__inp');
	if (inp.value === '1111') {
		if (document.querySelector('.promo').lastElementChild.tagName === "P") {
			document.querySelector('.promo').lastElementChild.remove();
		}
		document.querySelector('.promo').insertAdjacentHTML(
			'beforeend',
			`<p style = "color: #6a983c;" > Thank you!!!</p > `
		)
		resProductSummOrder()
	} else {
		if (document.querySelector('.promo').lastElementChild.tagName === "P") {
			document.querySelector('.promo').lastElementChild.remove();
		}
		document.querySelector('.promo').insertAdjacentHTML(
			'beforeend',
			`<p style = "color: red;" > No this code</p > `
		)
		resProductSummOrder()
	}
})




function year() {
	var Dy = new Date();
	Dy.setFullYear(Dy.getFullYear() + 1);

	var resDy = Dy.toISOString().slice(0, 10);

	return resDy
}
let guarDate = year();
const guarant = document.querySelector('.final__guranteed');
guarant.innerHTML = `Guaranteed delivery day: ${guarDate} `




// чекбоксы 

let formCheck = document.querySelector('.checkout__form').querySelectorAll('.checkbox__inp')

for (let i = 0; i < formCheck.length; i++) {
	if (formCheck[i].type === 'checkbox') {
		formCheck[i].addEventListener('click', function () {
			let checkboxText = formCheck[i].nextElementSibling;
			checkboxText.classList.toggle('_active');

		})
	}

}

// radio btn
let formRadio = document.querySelector('.checkout__form').querySelectorAll('.radio__inp-block')

for (let i = 0; i < formRadio.length; i++) {
	let radioName = formRadio[i].firstElementChild.name;
	if (radioName === 'ship') {
		formRadio[i].addEventListener('click', function () {
			formRadio.forEach((item) => {
				if (item.firstElementChild.name === 'ship') {
					let radioText = item.lastElementChild;
					radioText.classList.remove('_active')
				}
			})
			let radioText = formRadio[i].lastElementChild;
			radioText.classList.toggle('_active')
			if (radioText.innerHTML === 'FedEx') {
				const shipping = document.querySelector('.shipping');
				shipping.innerHTML = `32 USD`;
				resProductSummOrder()
			}
			if (radioText.innerHTML === 'DHL') {
				const shipping = document.querySelector('.shipping');
				shipping.innerHTML = `15 USD`;
				resProductSummOrder()
			}

		})
	}
	if (radioName === 'pay') {
		formRadio[i].addEventListener('click', function () {
			formRadio.forEach((item) => {
				if (item.firstElementChild.name === 'pay') {
					let radioText = item.lastElementChild;
					radioText.classList.remove('_active')
					let paymentInp = item.parentNode;
					paymentInp.classList.remove('_active')
					let paymentBody = item.parentNode.parentNode.querySelector('.radio__block-payment');
					paymentBody.classList.remove('_active')


					let all_inp = document.querySelector('.payment-met').querySelectorAll('input');

					for (let i = 0; i < all_inp.length; i++) {

						all_inp[i].classList.remove('_active')
					}

				}

			})
			let radioText = formRadio[i].lastElementChild;
			radioText.classList.add('_active')

			let paymentInp = formRadio[i].parentNode;
			paymentInp.classList.add('_active')

			let paymentBody = formRadio[i].parentNode.parentNode.querySelector('.radio__block-payment');
			paymentBody.classList.add('_active')

		})
	}
}


// отправка формы + проверки

// валидация на пустую строку (всех текстовых полей )

let all_inp = document.querySelector('.checkout__form').querySelectorAll('input,textarea');

for (let i = 0; i < all_inp.length; i++) {
	all_inp[i].addEventListener('input', function () {
		if (all_inp[i].value.trim() === '') {
			all_inp[i].classList.add('_active')
		} else {
			all_inp[i].classList.remove('_active')
		}
	})
}

// отправка формы без ошибок
let submit = false;
for (let i = all_inp.length; i >= 0; i--) {
	document.querySelector('.checkout__form').addEventListener('submit', function (e) {

		if (all_inp[i].type === 'text' || all_inp[i].type === 'number' || all_inp[i].type === 'email' || all_inp[i].tagName === 'TEXTAREA') {
			if (all_inp[i].value.trim() === '' && all_inp[i].name !== 'Cardnumber') {
				all_inp[i].classList.add('_active')
				all_inp[i].focus();
				all_inp[i].scrollIntoView({ block: "center", behavior: "smooth" });
				e.preventDefault();

			} else {
				submit = true;
			}
		}
		if (all_inp[i].parentNode.classList.contains('_active') || all_inp[i].parentNode.parentNode.parentNode.classList.contains('_active')) {
			if (all_inp[i].value.trim() === '' && all_inp[i].name === 'Cardnumber') {
				all_inp[i].classList.add('_active')
				all_inp[i].focus();
				all_inp[i].scrollIntoView({ block: "center", behavior: "smooth" });
				e.preventDefault();

			} else {
				submit = true;
			}
		}

		if (all_inp[i].name === 'agreeemails' || all_inp[i].name === 'agreepolicy') {
			if (!all_inp[i].checked) {
				all_inp[i].parentNode.style.border = '2px solid red';
				all_inp[i].focus();
				all_inp[i].scrollIntoView({ block: "center", behavior: "smooth" });
				e.preventDefault();

			} else {
				all_inp[i].parentNode.style.border = '1px solid #d1d1d1';
				submit = true;
			}
		}

	})
}




// Спойлер в подвале меню

let footer_title = document.querySelectorAll('.menu-footer__title');

for (let i = 0; i < footer_title.length; i++) {
	footer_title[i].onclick = footerSpoiler;
}

function footerSpoiler() {
	this.classList.toggle('_active');
	this.parentNode.lastElementChild.classList.toggle('_active');
}
// BASKET POPUP ====================================================================
// открываем
document.querySelector('._icon-header_basked').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');

	if (localStorage.getItem('cartlist')) {
		document.querySelector('.popup-bascet__product').innerHTML = localStorage.getItem('cartlist');
	}


	resProductSumm();

});
// закрываем на крестик
document.querySelector('.popup-bascet__icon-close').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');
	if (window.location.pathname === '/checkout.html') {
		document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
	}

});
// закрываем на фон 
document.querySelector('.popup-bascet__background').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

	if (window.location.pathname === '/checkout.html') {
		document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
	}


});

// переход на сайт go to shop
document.querySelector('.popup-bascet__goshop').addEventListener('click', function () {
	let popup = document.querySelector('.popup-bascet');
	let pop_body = document.querySelector('.popup-bascet__body');
	let pop_background = document.querySelector('.popup-bascet__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});
//  КОРЗИНА==================================


// Добавляемм товары в корзину и удаляем(универсальная функция)
function updateCart(productButton, productId, productAdd = true, productFocus = true) {

	const cart = document.querySelector('.header-body__basked');
	const cartQuantity = cart.querySelector('.header-body__add');
	const cartProduct = document.querySelector(`[data-cart-pid="${productId}"]`);
	const cartList = document.querySelector('.cart-list');

	// Добавляем

	if (productAdd) {
		if (cartQuantity) {
			if (!productFocus) {
				const cartProductQuantity = cartList.querySelectorAll('.pcs__input');
				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
			} else {
				cartQuantity.innerHTML = ++cartQuantity.innerHTML;
			}

		} else {
			cart.insertAdjacentHTML('beforeend', '<div class="header-body__add">1</div>')

		}

		if (!cartProduct) {
			const product = document.querySelector(`[data-pid="${productId}"]`);
			if (product.classList.contains('item-product-list')) {
				const cartProductUrl = product.querySelector('.item-product-list__image').href;
				const cartProductImage = product.querySelector('.item-product-list__image').innerHTML;
				const cartProductTitle = product.querySelector('.item-product-list__title').innerHTML;
				const cartProductPrice = product.querySelector('.item-product-list__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.item-product-list__price_old').innerHTML;
				const cartProductRating = product.querySelector('.item-product-list__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${cartProductUrl}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						${cartProductRating}
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}
			if (product.classList.contains('item-product')) {
				const cartProductUrl = product.querySelector('.item-product__image').href;
				const cartProductImage = product.querySelector('.item-product__image').innerHTML;
				const cartProductTitle = product.querySelector('.item-product__title').innerHTML;
				const cartProductPrice = product.querySelector('.item-product__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.item-product__price_old').innerHTML;
				const cartProductRating = product.querySelector('.item-product__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${cartProductUrl}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						${cartProductRating}
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="1" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}
			if (product.classList.contains('products-page')) {
				const value = product.querySelector('.pcs-prod__inputProd').value;
				const cartProductImage = product.querySelector('.product-img__first').innerHTML;
				const cartProductTitle = product.querySelector('.product-content__title').innerHTML;
				const cartProductPrice = product.querySelector('.product-content__price').innerHTML;
				const cartProductPriceOld = product.querySelector('.product-content__price_old').innerHTML;
				// const cartProductRating = product.querySelector('.product-content__rating').innerHTML;
				const cartProductContent = `
				<div class="item-product-basket__imageAndAction">
					<a href="${window.location}" class="item-product-basket__image _ibg">
						${cartProductImage}
					</a>
					<div class="item-product-basket__whishlist actionItems">
						<div class="_icon-wishlist actionItems__img"></div>
						<div class="actionItems__text">Wishlist</div>
					</div>
					<div class="item-product-basket__compare actionItems">
						<div class="_icon-compare actionItems__img"></div>
						<div class="actionItems__text">Compare</div>
					</div>
					<div class="item-product-basket__remove actionItems">
						<div class="_icon-remove actionItems__img"></div>
						<div class="actionItems__text">Remove</div>
					</div>
				</div>
				<div class="item-product-basket__body">
					<div class="item-product-basket__content">
						<h5 class="item-product-basket__title">${cartProductTitle}</h5>
						<div class="item-product-basket__attribute">
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Farm:</div>
								<div class="item-product-basket__atr-res">Tharamis Farm</div>
							</div>
							<div class="item-product-basket__atr">
								<div class="item-product-basket__atr-name">Fresheness:</div>
								<div class="item-product-basket__atr-res">1 day old</div>
							</div>
						</div>
					</div>
					<div class="item-product-basket__rating">
						<img src="img/product/rating4.png" alt="">
					</div>
					<div class="item-product-basket__action">
						<div class="item-product-basket__prices">
							<div class="item-product-basket__price">${cartProductPrice}</div>
							<div class="item-product-basket__price item-product-basket__price_old">${cartProductPriceOld}</div>
						</div>
						<div class="item-product-basket__pcs pcs">
							<input type="number" name="prodNum" value="${value}" placeholder="1 pcs" class="pcs__input">
							<span class="pcs__plash">|</span>
							<div class="pcs__text">Pcs</div>
						</div>

					</div>

				</div>`;

				cartList.insertAdjacentHTML(
					'beforeend',
					`<li data-cart-pid="${productId}" class="products-basket__item item-product-basket"> ${cartProductContent}</li>`
				);
			}


		} else {

			const cartProductQuantity = cartProduct.querySelector('.pcs__input');
			if (productFocus) {
				if (productButton.classList.contains('product-content__button')) {
					let inpForPage = productButton.parentNode.querySelector('.pcs-prod__inputProd');
					cartProductQuantity.value = +inpForPage.value + +cartProductQuantity.value;
				} else {
					cartProductQuantity.value = ++cartProductQuantity.value;
				}



				// для localStorage
				cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
			}


		}
		productButton.classList.remove('_hold');
	} else {
		const cartProductQuantity = cartProduct.querySelector('.pcs__input');

		cartProductQuantity.value = --cartProductQuantity.value;

		if (!parseInt(cartProductQuantity.value)) {
			cartProduct.remove();
		}
		const cartQuantityValue = --cartQuantity.innerHTML
		// для localStorage
		cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
		if (cartQuantityValue) {

			// cartQuantityValue = cartQuantityValue;
		} else {
			cartQuantity.remove();

			const popup = document.querySelector('.popup-bascet');
			const pop_body = document.querySelector('.popup-bascet__body');
			const pop_background = document.querySelector('.popup-bascet__background ');
			const body = document.querySelector('body');

			popup.classList.remove('_active');
			pop_body.classList.remove('_active');
			pop_background.classList.remove('_active');
			body.classList.remove('_lock');
		}
	}




	resProductSumm();



	const resultCartList = document.querySelector('.popup-bascet__product');
	const resultCartBasket = document.querySelector('.header-body__basked');
	localStorage.setItem('cartlist', resultCartList.innerHTML);
	localStorage.setItem('basket', resultCartBasket.innerHTML);


}


// удаление товаров из корзины
let basketBody = document.querySelector('.popup-bascet__product');
if (window.location.pathname !== '/checkout.html') {
	basketBody.addEventListener('click', function (e) {
		if (e.target.closest('.item-product-basket__remove')) {
			const productId = e.target.closest('.products-basket__item').dataset.cartPid;
			updateCart(e.target, productId, false);
			let inp = e.target.parentNode.parentNode.parentNode.querySelector('.pcs__input');
			inp.setAttribute('value', `${inp.value}`); // посмотреть!!!!
		}
		// go shop
		if (e.target.closest('.popup-bascet__goshop')) {
			let popup = document.querySelector('.popup-bascet');
			let pop_body = document.querySelector('.popup-bascet__body');
			let pop_background = document.querySelector('.popup-bascet__background ');
			let body = document.querySelector('body');


			popup.classList.remove('_active');
			pop_body.classList.remove('_active');
			pop_background.classList.remove('_active');
			body.classList.remove('_lock');
		}
	});



	basketBody.addEventListener('focusout', function (e) {
		if (e.target.closest('.pcs__input')) {

			if (e.target.value <= 0) {
				e.target.value = 1;
				e.target.setAttribute('value', '1');
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;
				updateCart(e.target, productId, true, false);

			} else {
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;

				e.target.setAttribute('value', `${e.target.value}`);

				updateCart(e.target, productId, true, false);
			}
			resProductSumm();
		}
	})
} else {
	basketBody.addEventListener('click', function (e) {
		if (e.target.closest('.item-product-basket__remove')) {
			const product = e.target.closest('.products-basket__item');
			const cartProductQuantity = product.querySelector('.pcs__input');
			const cart = document.querySelector('.header-body__basked');
			const cartQuantity = cart.querySelector('.header-body__add');

			cartProductQuantity.value = --cartProductQuantity.value;

			if (!parseInt(cartProductQuantity.value)) {
				product.remove();
			}
			const cartQuantityValue = --cartQuantity.innerHTML
			// для localStorage
			cartProductQuantity.setAttribute('value', `${cartProductQuantity.value}`);
			if (cartQuantityValue) {

				// cartQuantityValue = cartQuantityValue;
			} else {
				cartQuantity.remove();
				const popup = document.querySelector('.popup-bascet');
				const pop_body = document.querySelector('.popup-bascet__body');
				const pop_background = document.querySelector('.popup-bascet__background ');
				const body = document.querySelector('body');

				popup.classList.remove('_active');
				pop_body.classList.remove('_active');
				pop_background.classList.remove('_active');
				body.classList.remove('_lock');

			}


			let inp = e.target.parentNode.parentNode.parentNode.querySelector('.pcs__input');
			inp.setAttribute('value', `${inp.value}`); // посмотреть!!!!
			const resultCartList = document.querySelector('.popup-bascet__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);

			document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
			resProductSumm()
			resProductSummOrder()
		}

	});
	basketBody.addEventListener('focusout', function (e) {
		if (e.target.closest('.pcs__input')) {

			const cartProductQuantity = basketBody.querySelectorAll('.pcs__input');
			const cart = document.querySelector('.header-body__basked');
			const cartQuantity = cart.querySelector('.header-body__add');
			if (e.target.value <= 0) {
				e.target.value = 1;
				e.target.setAttribute('value', '1');

				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
				resProductSumm()
				resProductSummOrder()

			} else {
				const productId = e.target.closest('.products-basket__item').dataset.cartPid;

				e.target.setAttribute('value', `${e.target.value}`);

				let resultSumm = 0;
				for (let i = 0; i < cartProductQuantity.length; i++) {
					resultSumm += Number(cartProductQuantity[i].value)
				}
				cartQuantity.innerHTML = resultSumm;
			}
			const resultCartList = document.querySelector('.popup-bascet__product');
			const resultCartBasket = document.querySelector('.header-body__basked');
			localStorage.setItem('cartlist', resultCartList.innerHTML);
			localStorage.setItem('basket', resultCartBasket.innerHTML);
			document.querySelector('.order__product').innerHTML = localStorage.getItem('cartlist');
			resProductSumm();
			resProductSummOrder()
		}
	})
}

// Подсчет стоимости

function resProductSumm() {
	let basketBody = document.querySelector('.popup-bascet__product');
	const product = basketBody.querySelectorAll('.item-product-basket');
	let resSumm = 0;
	for (let i = 0; i < product.length; i++) {
		const summ = product[i].querySelector('.item-product-basket__price').innerHTML;
		const pcs = product[i].querySelector('.pcs__input').value;

		resSumm += parseInt(summ) * +pcs;
	}

	const res = document.querySelector('.popup-bascet__result-sum');
	res.innerHTML = `${resSumm} USD`;

	goCheckNext();
};

// оформление если в корзине что то есть 
function goCheckNext() {
	let goCheck = document.querySelector('.popup-bascet__gotocheck');
	let numSumm = document.querySelector('.cart-list').children.length;
	if (numSumm === 0) {
		goCheck.style.display = 'none';
	} else {
		goCheck.style.display = 'block';
	}
}














// USER POPUP ====================================================================

// открываем
document.querySelector('._icon-header_user').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');


	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');

});

// открываем из мобильного меню
document.querySelector('.menu__user-row').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');



	popup.classList.add('_active');
	pop_body.classList.add('_active');
	pop_background.classList.add('_active');
	body.classList.add('_lock');


	// одновременно прячем мобильное меню
	let burger_icon = document.querySelector('.menu__icon');
	let mobile_menu = document.querySelector('.menu__body');
	let before_background = document.querySelector('.menu__before-background');
	let menu__button_burger = document.querySelector('.menu__button-burger');
	let user_singin = document.querySelector('.menu__user')

	burger_icon.classList.remove('_active');
	mobile_menu.classList.remove('_active');
	before_background.classList.remove('_active');
	menu__button_burger.classList.remove('_active');
	user_singin.classList.remove('_active');


});


// закрываем на крестик
document.querySelector('.popup-user__icon-close').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');


	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});
// закрываем на фон 
document.querySelector('.popup-user__background').addEventListener('click', function () {
	let popup = document.querySelector('.popup-user');
	let pop_body = document.querySelector('.popup-user__body');
	let pop_background = document.querySelector('.popup-user__background ');
	let body = document.querySelector('body');

	popup.classList.remove('_active');
	pop_body.classList.remove('_active');
	pop_background.classList.remove('_active');
	body.classList.remove('_lock');

});


// ============================================================================================


